{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","todos","value","handleChange","bind","displayTodos","addTodo","this","client","Stitch","initializeDefaultAppClient","getServiceClient","RemoteMongoClient","factory","db","displayTodosOnLoad","collection","find","limit","asArray","then","setState","auth","loginWithCredential","AnonymousCredential","catch","console","error","event","preventDefault","log","insertOne","owner_id","user","id","item","target","className","onSubmit","type","onChange","map","todo","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wTAsGeA,G,wDAzFb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAO,GACPC,MAAO,IAGT,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBATH,E,gEAcZG,KAAKC,OAASC,IAAOC,2BAA2B,cAEhCH,KAAKC,OAAOG,iBAC1BC,IAAkBC,QAClB,iBAGFN,KAAKO,GAAKP,KAAKC,OAAOG,iBAAiBC,IAAkBC,QAAS,iBAAiBC,GAAG,QAEtFP,KAAKQ,uB,qCAGS,IAAD,OACbR,KAAKO,GACFE,WAAW,aACXC,KAAK,GAAI,CAAEC,MAAO,MAClBC,UACAC,MAAK,SAAAnB,GACJ,EAAKoB,SAAS,CACZpB,e,2CAMNM,KAAKC,OAAOc,KACTC,oBAAoB,IAAIC,KACxBJ,KAAKb,KAAKF,cACVoB,MAAMC,QAAQC,S,8BAGXC,GACNA,EAAMC,iBADO,IAEL3B,EAAUK,KAAKP,MAAfE,MACRwB,QAAQI,IAAIvB,KAAKO,IAEjBP,KAAKO,GACFE,WAAW,aACXe,UAAU,CACTC,SAAUzB,KAAKC,OAAOc,KAAKW,KAAKC,GAChCC,KAAMjC,IAEPkB,KAAKb,KAAKF,gB,mCAGFuB,GACXrB,KAAKc,SAAS,CAAEnB,MAAO0B,EAAMQ,OAAOlC,U,+BAIpC,OACE,yBAAKmC,UAAU,OACb,kDACA,6BACA,+CACA,0BAAMC,SAAU/B,KAAKD,SACnB,+BACE,2BACEiC,KAAK,OACLrC,MAAOK,KAAKP,MAAME,MAClBsC,SAAUjC,KAAKJ,gBAGnB,2BAAOoC,KAAK,SAASrC,MAAM,YAE7B,4BACGK,KAAKP,MAAMC,MAAMwC,KAAI,SAAAC,GACpB,OAAO,4BAAKA,EAAKP,e,GAlFXQ,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAE,GACLD,QAAQC,MAAMA,EAAMgC,c","file":"static/js/main.c854f7ae.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Stitch,\n  AnonymousCredential,\n  RemoteMongoClient\n} from \"mongodb-stitch-browser-sdk\";\nimport \"./App.css\";\nimport { v4 as uuidv4 } from 'uuid';\n\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [],\n      value: \"\"\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.displayTodos = this.displayTodos.bind(this);\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  componentDidMount() {\n    // Initialize the App Client\n    this.client = Stitch.initializeDefaultAppClient(\"test-ifgzk\");\n    // Get a MongoDB Service Client, used for logging in and communicating with Stitch\n    const mongodb = this.client.getServiceClient(\n      RemoteMongoClient.factory,\n      \"mongodb-atlas\"\n    );\n    // Get a reference to the todo database\n    this.db = this.client.getServiceClient(RemoteMongoClient.factory, 'mongodb-atlas').db('todo');\n\n    this.displayTodosOnLoad();\n  }\n\n  displayTodos() {\n    this.db\n      .collection(\"todo-item\")\n      .find({}, { limit: 1000 })\n      .asArray()\n      .then(todos => {\n        this.setState({\n          todos\n        });\n      });\n  }\n\n  displayTodosOnLoad() {\n    this.client.auth\n      .loginWithCredential(new AnonymousCredential())\n      .then(this.displayTodos)\n      .catch(console.error);\n  }\n\n  addTodo(event) {\n    event.preventDefault();\n    const { value } = this.state;\n    console.log(this.db)\n\n    this.db\n      .collection(\"todo-item\")\n      .insertOne({\n        owner_id: this.client.auth.user.id,\n        item: value\n      })\n      .then(this.displayTodos);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h3>This is a todo app</h3>\n        <hr />\n        <p>Add a Todo Item:</p>\n        <form onSubmit={this.addTodo}>\n          <label>\n            <input\n              type=\"text\"\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <ul>\n          {this.state.todos.map(todo => {\n            return <li>{todo.item}</li>;\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}